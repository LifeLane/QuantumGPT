
// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview AI Trading Strategy Suggestion flow.
 *
 * - suggestTradingStrategy - A function that suggests a trading strategy for a given cryptocurrency.
 * - SuggestTradingStrategyInput - The input type for the suggestTradingStrategy function.
 * - SuggestTradingStrategyOutput - The return type for the suggestTradingStrategy function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { getCryptoMarketDataTool, type MarketData, MarketDataSchema } from '@/ai/tools/market-data-tool';

const SuggestTradingStrategyInputSchema = z.object({
  cryptocurrency: z.string().describe('The ticker symbol of the cryptocurrency to analyze (e.g., BTC).'),
  riskTolerance: z.enum(['low', 'medium', 'high']).describe('The user\'s risk tolerance level.'),
});
export type SuggestTradingStrategyInput = z.infer<typeof SuggestTradingStrategyInputSchema>;

const SuggestTradingStrategyOutputSchema = z.object({
  tradePossible: z.boolean().describe('Whether a trade is currently viable based on the analysis. Set to false if no clear opportunity or if data is missing.'),
  suggestedPosition: z.enum(['Long', 'Short', 'None']).describe('The suggested trading position (Long, Short). Set to "None" if tradePossible is false.'),
  strategyExplanation: z.string().describe('A detailed analysis explaining the reasoning behind the trade recommendation and the suggested price points, considering the current market price, user risk tolerance, and common technical analysis principles (like trends, support/resistance, indicators like MA/RSI/MACD, and chart patterns).'),
  currentPrice: z.number().nullable().describe('The current market price of the cryptocurrency fetched by the tool, or null if unavailable.'),
  entryPoint: z.number().nullable().describe('The recommended entry price for the trade, or null if no trade is recommended or tradePossible is false.'),
  exitPoint: z.number().nullable().describe('The recommended exit price for the trade, or null if no trade is recommended or tradePossible is false.'),
  stopLossLevel: z.number().nullable().describe('The recommended stop loss price for the trade, or null if no trade is recommended or tradePossible is false.'),
  profitTarget: z.number().nullable().describe('The recommended take profit price for the trade, or null if no trade is recommended or tradePossible is false.'),
  disclaimer: z.string().describe(
      'A disclaimer emphasizing that all trading involves risk. The current price is fetched via a tool. All other figures (entry, exit, stop-loss, profit target) are illustrative suggestions generated by the AI based on its analysis and are NOT live financial advice. Consult a financial expert.'
    ),
});
export type SuggestTradingStrategyOutput = z.infer<typeof SuggestTradingStrategyOutputSchema>;

export async function suggestTradingStrategy(input: SuggestTradingStrategyInput): Promise<SuggestTradingStrategyOutput> {
  return suggestTradingStrategyFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestTradingStrategyPrompt',
  input: {schema: z.object({
    cryptocurrency: SuggestTradingStrategyInputSchema.shape.cryptocurrency,
    riskTolerance: SuggestTradingStrategyInputSchema.shape.riskTolerance,
    marketData: MarketDataSchema.nullable().describe("Current market data for the cryptocurrency. This will be fetched by a tool prior to calling you."),
  })},
  output: {schema: SuggestTradingStrategyOutputSchema},
  prompt: `You are an AI-powered trading strategy advisor with expertise in technical chart analysis.
Your goal is to provide a clear, actionable trading strategy for the given cryptocurrency based on the provided market data and the user's risk tolerance.

Cryptocurrency: {{{cryptocurrency}}}
User Risk Tolerance: {{{riskTolerance}}}

Current Market Data (from tool):
- Price: {{#if marketData.price}}{{marketData.price}}{{else}}not available{{/if}}
- 24h Volume: {{#if marketData.volume24h}}{{marketData.volume24h}}{{else}}not available{{/if}}
- 24h Price Change: {{#if marketData.priceChange24hPercent}}{{marketData.priceChange24hPercent}}%{{else}}not available{{/if}}

Begin by *simulating* an analysis of this market data as if you were interpreting a TradingView chart.
Your analysis should be based *solely* on the provided market data (price, volume, 24h change).
Based on this data, infer potential:
- Current trend (uptrend, downtrend, sideways).
- Key support and resistance levels relative to the current price.
- Plausible chart patterns (e.g., triangles, head and shoulders, flags) that might be forming or recently completed given the data context.
- Potential signals from common technical indicators (e.g., Moving Averages crossovers, RSI overbought/oversold levels, MACD signals) that could be implied by the current price action and volume.

Based on this simulated "chart-like" analysis of the provided data and considering the user's risk tolerance ({{{riskTolerance}}}), formulate a trading strategy.

Your strategy response MUST include:
- tradePossible: A boolean indicating if a trade is viable based on your simulated analysis of the provided data.
- suggestedPosition: "Long", "Short", or "None". If tradePossible is false, this must be "None".
- strategyExplanation: A detailed explanation of your analysis. Why do you suggest this strategy? What chart patterns or indicator signals (that you've inferred from the data) support it? How does risk tolerance influence it?
- currentPrice: The price fetched by the tool (repeat it here from the input marketData.price).
- entryPoint: A suggested price to enter a trade. If tradePossible is false, this must be null.
- exitPoint: A suggested price to exit a trade if it goes well (e.g., a take profit level). If tradePossible is false, this must be null.
- stopLossLevel: A suggested price to cut losses if the trade goes against you. If tradePossible is false, this must be null.
- profitTarget: An alternative or primary profit target. This might be the same as exitPoint or a more ambitious target. If tradePossible is false, this must be null.
- disclaimer: The standard financial disclaimer.

If marketData is null or marketData.price is null:
- Your strategyExplanation should state that a strategy cannot be formed due to lack of market data.
- Set tradePossible to false.
- Set suggestedPosition to "None".
- All price-related fields (currentPrice, entryPoint, exitPoint, stopLossLevel, profitTarget) MUST be null.

If, after your simulated analysis, you determine no clear trading opportunity exists even with available market data, set tradePossible to false, suggestedPosition to "None", and relevant price-related fields (entryPoint, exitPoint, stopLossLevel, profitTarget) to null. The currentPrice should still reflect the fetched price if available.

Present your response strictly in the JSON format defined by the output schema.
`,
});

const suggestTradingStrategyFlow = ai.defineFlow(
  {
    name: 'suggestTradingStrategyFlow',
    inputSchema: SuggestTradingStrategyInputSchema,
    outputSchema: SuggestTradingStrategyOutputSchema,
  },
  async (input: SuggestTradingStrategyInput): Promise<SuggestTradingStrategyOutput> => {
    let marketData: MarketData | null = null;
    try {
      console.log(`[AIStrategyFlow] Fetching market data for: ${input.cryptocurrency}`);
      marketData = await getCryptoMarketDataTool({symbol: input.cryptocurrency});
      console.log(`[AIStrategyFlow] Market data for ${input.cryptocurrency}:`, marketData);
    } catch (toolError) {
      console.error(`[AIStrategyFlow] Error calling getCryptoMarketDataTool for ${input.cryptocurrency}:`, toolError);
    }

    console.log(`[AIStrategyFlow] Calling prompt with input:`, { ...input, marketData });
    const {output} = await prompt({
        ...input,
        marketData: marketData, // Pass the fetched (or null) marketData to the prompt
    });
    
    if (!output) {
        console.error("[AIStrategyFlow] AI model did not return an output. Constructing default error response.");
        return {
            tradePossible: false,
            suggestedPosition: "None",
            strategyExplanation: "The AI model did not return a valid strategy. This could be due to an internal error or inability to process the request. Market data may or may not have been available.",
            currentPrice: marketData?.price ?? null,
            entryPoint: null,
            exitPoint: null,
            stopLossLevel: null,
            profitTarget: null,
            disclaimer: "An error occurred while generating the strategy. Please try again. All trading involves risk. Consult a financial expert.",
        };
    }
    
    console.log(`[AIStrategyFlow] AI Output for ${input.cryptocurrency}:`, output);
    // Ensure currentPrice in output matches what the tool provided (or is null if tool failed/returned null),
    // overriding whatever the LLM might have hallucinated for currentPrice if marketData was indeed null.
    const finalOutput = {
        ...output,
        currentPrice: marketData?.price ?? null,
    };

    // If marketData was null, ensure tradePossible is false and position is None.
    if (!marketData || marketData.price === null) {
        finalOutput.tradePossible = false;
        finalOutput.suggestedPosition = "None";
        finalOutput.entryPoint = null;
        finalOutput.exitPoint = null;
        finalOutput.stopLossLevel = null;
        finalOutput.profitTarget = null;
        // Optionally, you might want to overwrite strategyExplanation if data was missing,
        // but the prompt already guides the LLM to do this.
        // finalOutput.strategyExplanation = "Strategy cannot be determined due to missing market data.";
    }


    return finalOutput;
  }
);

