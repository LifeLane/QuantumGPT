
// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview AI Trading Strategy Suggestion flow.
 *
 * - suggestTradingStrategy - A function that suggests a trading strategy for a given cryptocurrency.
 * - SuggestTradingStrategyInput - The input type for the suggestTradingStrategy function.
 * - SuggestTradingStrategyOutput - The return type for the suggestTradingStrategy function.
 */

import {ai, geminiPro} from '@/ai/genkit'; // Using geminiPro as default for this flow
import {z} from 'genkit';
import { getCryptoMarketDataTool, type MarketData, MarketDataSchema } from '@/ai/tools/market-data-tool';

const SuggestTradingStrategyInputSchema = z.object({
  cryptocurrency: z.string().describe('The ticker symbol of the cryptocurrency to analyze (e.g., BTC).'),
  riskTolerance: z.enum(['low', 'medium', 'high']).describe('The user\'s risk tolerance level.'),
});
export type SuggestTradingStrategyInput = z.infer<typeof SuggestTradingStrategyInputSchema>;

const SuggestTradingStrategyOutputSchema = z.object({
  tradePossible: z.boolean().describe('Whether a trade is currently viable based on the analysis. Set to false if no clear opportunity or if data is missing.'),
  suggestedPosition: z.enum(['Long', 'Short', 'None']).describe('The suggested trading position (Long, Short). Set to "None" if tradePossible is false.'),
  strategyExplanation: z.string().describe('A detailed analysis explaining the reasoning behind the trade recommendation and the suggested price points, considering the current market price, user risk tolerance, and common technical analysis principles (like trends, support/resistance, indicators like MA/RSI/MACD, and chart patterns). This explanation should be based on *simulating* chart analysis using ONLY the provided market data points (price, volume, change).'),
  currentPrice: z.number().nullable().describe('The current market price of the cryptocurrency fetched by the tool, or null if unavailable.'),
  entryPoint: z.number().nullable().describe('The recommended entry price for the trade, or null if no trade is recommended or tradePossible is false.'),
  exitPoint: z.number().nullable().describe('The recommended exit price for the trade, or null if no trade is recommended or tradePossible is false.'),
  stopLossLevel: z.number().nullable().describe('The recommended stop loss price for the trade, or null if no trade is recommended or tradePossible is false.'),
  profitTarget: z.number().nullable().describe('The recommended take profit price for the trade, or null if no trade is recommended or tradePossible is false.'),
  disclaimer: z.string().describe(
      'A disclaimer emphasizing that all trading involves risk. The current price is fetched via a tool. All other figures (entry, exit, stop-loss, profit target) are illustrative suggestions generated by the AI based on its analysis and are NOT live financial advice. Consult a financial expert.'
    ),
});
export type SuggestTradingStrategyOutput = z.infer<typeof SuggestTradingStrategyOutputSchema>;

export async function suggestTradingStrategy(input: SuggestTradingStrategyInput): Promise<SuggestTradingStrategyOutput> {
  return suggestTradingStrategyFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestTradingStrategyPrompt',
  model: geminiPro, // Specify the model for this prompt
  input: {schema: z.object({
    cryptocurrency: SuggestTradingStrategyInputSchema.shape.cryptocurrency,
    riskTolerance: SuggestTradingStrategyInputSchema.shape.riskTolerance,
    marketData: MarketDataSchema.nullable().describe("Current market data for the cryptocurrency. This will be fetched by a tool prior to calling you. If this is null, or if price is null, a trading strategy cannot be reliably formed."),
  })},
  output: {schema: SuggestTradingStrategyOutputSchema},
  prompt: `You are an AI-powered trading strategy advisor with expertise in technical chart analysis.
Your goal is to provide a clear, actionable trading strategy for the given cryptocurrency based *solely* on the provided market data points (current price, 24h volume, 24h price change) and the user's risk tolerance. You DO NOT have access to a live chart image; you must *simulate* chart analysis using only these data points.

Cryptocurrency: {{{cryptocurrency}}}
User Risk Tolerance: {{{riskTolerance}}}

Current Market Data (from tool):
- Current Price: {{#if marketData.price}}{{marketData.price}}{{else}}not available{{/if}}
- 24h Volume: {{#if marketData.volume24h}}{{marketData.volume24h}}{{else}}not available{{/if}}
- 24h Price Change (%): {{#if marketData.priceChange24hPercent}}{{marketData.priceChange24hPercent}}%{{else}}not available{{/if}}

Your Task:
1.  **Analyze Market Data**: Based *only* on the provided 'Current Price', '24h Volume', and '24h Price Change (%)':
    *   Infer the potential current trend (e.g., "Given the positive 24h price change and high volume, the short-term trend appears to be upward.").
    *   Infer potential key support and resistance levels *relative to the current price* (e.g., "If current price is X, a recent low might act as support around Y, and a recent high as resistance around Z, based on typical price action around these data points.").
    *   Hypothesize plausible chart patterns (e.g., "A significant price increase on high volume might suggest a breakout, or if the price has consolidated, it could be forming a flag/pennant.").
    *   Consider how common technical indicators (like Moving Averages, RSI, MACD) *might behave* given this limited data (e.g., "A sharp price increase might push RSI into overbought territory.").
    *   Your analysis for these points MUST be based on simulating what these indicators/patterns would look like given ONLY the numeric data provided. Do NOT invent data or assume you see a full chart.

2.  **Formulate Strategy**: Based on your simulated analysis of the provided data and considering the user's risk tolerance ('{{{riskTolerance}}}'), formulate a trading strategy.

3.  **Output**: Your response MUST be in the JSON format defined by the output schema and include all fields.

Output Field Instructions:
-   **tradePossible**: Boolean. Set to \`false\` if:
    *   \`marketData\` is \`null\`.
    *   \`marketData.price\` is \`null\`.
    *   Your simulated analysis of the provided data indicates no clear or safe trading opportunity.
    Otherwise, set to \`true\` if a viable trade is identified.
-   **suggestedPosition**: "Long", "Short", or "None". If \`tradePossible\` is \`false\`, this MUST be "None".
-   **strategyExplanation**: A detailed explanation of your simulated analysis. How did you infer trends, S/R levels, patterns, or indicator signals from the limited data? How does risk tolerance influence the strategy? If \`tradePossible\` is \`false\` due to missing data, state that clearly.
-   **currentPrice**: The \`marketData.price\` fetched by the tool (repeat it here from the input). If \`marketData.price\` is null, this field must be null.
-   **entryPoint, exitPoint, stopLossLevel, profitTarget**: Illustrative price points. If \`tradePossible\` is \`false\`, these MUST all be \`null\`.
-   **disclaimer**: The standard financial disclaimer about risk and this not being financial advice.

Example for missing data: If \`marketData\` is \`null\`, your \`strategyExplanation\` should state: "A trading strategy cannot be formed due to missing market data for {{{cryptocurrency}}}." \`tradePossible\` must be \`false\`, \`suggestedPosition\` "None", and all price fields \`null\`.

Present your response strictly in the JSON format defined by the output schema.
`,
});

const suggestTradingStrategyFlow = ai.defineFlow(
  {
    name: 'suggestTradingStrategyFlow',
    inputSchema: SuggestTradingStrategyInputSchema,
    outputSchema: SuggestTradingStrategyOutputSchema,
    // Tools are not directly used by this prompt, but the flow calls the tool.
  },
  async (input: SuggestTradingStrategyInput): Promise<SuggestTradingStrategyOutput> => {
    let marketData: MarketData | null = null;
    try {
      console.log(`[AIStrategyFlow] Fetching market data for: ${input.cryptocurrency}`);
      marketData = await getCryptoMarketDataTool({symbol: input.cryptocurrency}); // Calling the tool as a function
      console.log(`[AIStrategyFlow] Market data for ${input.cryptocurrency}:`, marketData);
    } catch (toolError) {
      console.error(`[AIStrategyFlow] Error calling getCryptoMarketDataTool for ${input.cryptocurrency}:`, toolError);
      // marketData remains null
    }

    console.log(`[AIStrategyFlow] Calling prompt with input:`, { ...input, marketData });
    const {output} = await prompt({
        ...input,
        marketData: marketData, // Pass the fetched (or null) marketData to the prompt
    });
    
    if (!output) {
        console.error("[AIStrategyFlow] AI model did not return an output. Constructing default error response.");
        return {
            tradePossible: false,
            suggestedPosition: "None",
            strategyExplanation: "The AI model did not return a valid strategy. This could be due to an internal error or inability to process the request. Market data may or may not have been available.",
            currentPrice: marketData?.price ?? null,
            entryPoint: null,
            exitPoint: null,
            stopLossLevel: null,
            profitTarget: null,
            disclaimer: "An error occurred while generating the strategy. Please try again. All trading involves risk. Consult a financial expert.",
        };
    }
    
    console.log(`[AIStrategyFlow] AI Output for ${input.cryptocurrency}:`, output);
    // Ensure currentPrice in output matches what the tool provided (or is null if tool failed/returned null),
    // overriding whatever the LLM might have hallucinated for currentPrice if marketData was indeed null.
    const finalOutput = {
        ...output,
        currentPrice: marketData?.price ?? null,
    };

    // If marketData was null or its price was null, ensure tradePossible is false and position is None, and price points are null.
    if (!marketData || marketData.price === null || marketData.price === undefined) {
        finalOutput.tradePossible = false;
        finalOutput.suggestedPosition = "None";
        finalOutput.entryPoint = null;
        finalOutput.exitPoint = null;
        finalOutput.stopLossLevel = null;
        finalOutput.profitTarget = null;
        // The prompt instructs the LLM to update strategyExplanation for missing data,
        // but we can add a fallback here if needed.
        if (!finalOutput.strategyExplanation.includes("missing market data")) {
             finalOutput.strategyExplanation = `Strategy cannot be determined due to missing or incomplete market data for ${input.cryptocurrency}. ${finalOutput.strategyExplanation}`;
        }
    } else if (!finalOutput.tradePossible) { // If trade is not possible but we had data, ensure position and points are nullified
        finalOutput.suggestedPosition = "None";
        finalOutput.entryPoint = null;
        finalOutput.exitPoint = null;
        finalOutput.stopLossLevel = null;
        finalOutput.profitTarget = null;
    }


    return finalOutput;
  }
);

    