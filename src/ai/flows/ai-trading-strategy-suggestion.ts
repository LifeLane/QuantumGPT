
// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview AI Trading Strategy Suggestion flow.
 *
 * - suggestTradingStrategy - A function that suggests a trading strategy for a given cryptocurrency.
 * - SuggestTradingStrategyInput - The input type for the suggestTradingStrategy function.
 * - SuggestTradingStrategyOutput - The return type for the suggestTradingStrategy function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { getCryptoMarketDataTool, type MarketData, MarketDataSchema } from '@/ai/tools/market-data-tool';

const SuggestTradingStrategyInputSchema = z.object({
  cryptocurrency: z.string().describe('The ticker symbol of the cryptocurrency to analyze (e.g., BTC).'),
  riskTolerance: z.enum(['low', 'medium', 'high']).describe('The user\'s risk tolerance level.'),
});
export type SuggestTradingStrategyInput = z.infer<typeof SuggestTradingStrategyInputSchema>;

const SuggestTradingStrategyOutputSchema = z.object({
  trade: z.boolean().describe('Whether a trade is recommended (true) or not (false).'),
  position: z.enum(['Long', 'Short', 'None']).describe('The suggested position (Long, Short, or None if no trade).'),
  entryPrice: z.number().nullable().describe('The recommended entry price for the trade, or null if no trade is recommended.'),
  exitPrice: z.number().nullable().describe('The recommended exit price for the trade, or null if no trade is recommended.'),
  stopLoss: z.number().nullable().describe('The recommended stop loss price for the trade, or null if no trade is recommended.'),
  takeProfit: z.number().nullable().describe('The recommended take profit price for the trade, or null if no trade is recommended.'),
  analysis: z.string().describe('A detailed analysis explaining the reasoning behind the trade recommendation and the suggested price points, considering the current market price and user risk tolerance.'),
 disclaimer: z.string().describe(
      'A disclaimer emphasizing that all trading involves risk. The current price is fetched via a tool (using live data from Messari API if available, otherwise simulated). All other figures (entry, exit, stop-loss, profit target) are illustrative suggestions generated by the AI based on its analysis and are NOT live financial advice. Consult a financial expert.'
    ),
});
export type SuggestTradingStrategyOutput = z.infer<typeof SuggestTradingStrategyOutputSchema>;

export async function suggestTradingStrategy(input: SuggestTradingStrategyInput): Promise<SuggestTradingStrategyOutput> {
  return suggestTradingStrategyFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestTradingStrategyPrompt',
  input: {schema: z.object({ // Prompt input includes fetched market data
    cryptocurrency: SuggestTradingStrategyInputSchema.shape.cryptocurrency,
    riskTolerance: SuggestTradingStrategyInputSchema.shape.riskTolerance,
    marketData: MarketDataSchema.nullable().describe("Current market data for the cryptocurrency. This will be fetched by a tool prior to calling you."),
  })},
  output: {schema: SuggestTradingStrategyOutputSchema},
  prompt: `You are an AI-powered trading strategy advisor with expertise in technical chart analysis.
You will provide a clear, actionable trading prediction for the given cryptocurrency based on the provided market data and the user's risk tolerance.

User Risk Tolerance: {{{riskTolerance}}}

Current Market Data (from tool):
- Price: {{#if marketData.price}}{{marketData.price}}{{else}}not available{{/if}}
- 24h Volume: {{#if marketData.volume24h}}{{marketData.volume24h}}{{else}}not available{{/if}}
- 24h Price Change: {{#if marketData.priceChange24hPercent}}{{marketData.priceChange24hPercent}}%{{else}}not available{{/if}}

Analyze the current market data for {{{cryptocurrency}}} as if you are looking at a TradingView chart, applying general principles of technical analysis (like trends, support/resistance, indicators) and considering the user's risk tolerance ({{{riskTolerance}}}).

Based on your analysis and considering the user's risk tolerance, provide a trading prediction in JSON format.

JSON Output Format:
{
  "trade": boolean, // true if a trade is recommended, false otherwise
  "position": "Long" | "Short" | "None", // "Long", "Short", or "None" if no trade
  "entryPrice": number | null, // Recommended entry price, or null
  "exitPrice": number | null, // Recommended exit price, or null
  "stopLoss": number | null, // Recommended stop loss price, or null
  "takeProfit": number | null, // Recommended take profit price, or null
  "analysis": string, // Detailed explanation of the reasoning
  "disclaimer": string // Standard disclaimer
}

If market data is not available, set `trade` to false, `position` to "None", and all price points to null. Your `analysis` should explain that no trade can be recommended due to lack of data.
`,
});

const suggestTradingStrategyFlow = ai.defineFlow(
  {
    name: 'suggestTradingStrategyFlow',
    inputSchema: SuggestTradingStrategyInputSchema,
    outputSchema: SuggestTradingStrategyOutputSchema,
  },
  async (input: SuggestTradingStrategyInput) => {
    let marketData: MarketData | null = null;
    try {
      marketData = await getCryptoMarketDataTool({symbol: input.cryptocurrency});
    } catch (toolError) {
      console.error(`Error calling getCryptoMarketDataTool for ${input.cryptocurrency}:`, toolError);
    }

    const {output} = await prompt({
        ...input,
        marketData: marketData,
    });
    
    if (!output) {
        throw new Error("The AI model did not return the expected output format for trading strategy.");
    }
    
    return output;
  }
);
