
// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview AI Trading Strategy Suggestion flow.
 *
 * - suggestTradingStrategy - A function that suggests a trading strategy for a given cryptocurrency.
 * - SuggestTradingStrategyInput - The input type for the suggestTradingStrategy function.
 * - SuggestTradingStrategyOutput - The return type for the suggestTradingStrategy function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { getCryptoMarketDataTool, type MarketData, MarketDataSchema } from '@/ai/tools/market-data-tool';

const SuggestTradingStrategyInputSchema = z.object({
  cryptocurrency: z.string().describe('The ticker symbol of the cryptocurrency to analyze (e.g., BTC).'),
  riskTolerance: z.enum(['low', 'medium', 'high']).describe('The user\'s risk tolerance level.'),
});
export type SuggestTradingStrategyInput = z.infer<typeof SuggestTradingStrategyInputSchema>;

const SuggestTradingStrategyOutputSchema = z.object({
  strategyExplanation: z.string().describe('A detailed explanation of the suggested trading strategy, considering the current market price obtained via the market data tool.'),
  currentPrice: z.number().optional().describe('The current market price of the cryptocurrency, as reported by the market data tool and used as a basis for this strategy suggestion. This is the direct output from the tool if data was available.'),
  entryPoint: z.number().describe('An illustrative suggested entry point for the trade, derived by the AI based on the strategy and the fetched current price.'),
  exitPoint: z.number().describe('An illustrative suggested exit point for the trade, derived by the AI based on the strategy.'),
  stopLossLevel: z.number().describe('An illustrative suggested stop-loss level for the trade, derived by the AI based on the strategy.'),
  profitTarget: z.number().describe('An illustrative profit target for the trade, derived by the AI based on the strategy.'),
  disclaimer: z
    .string()
    .describe(
      'A disclaimer emphasizing that all trading involves risk. The current price is fetched via a tool (using simulated data in the current `crypto-data-service.ts` setup). All other figures (entry, exit, stop-loss, profit target) are illustrative suggestions generated by the AI based on its analysis and are NOT live financial advice. Consult a financial expert.'
    ),
});
export type SuggestTradingStrategyOutput = z.infer<typeof SuggestTradingStrategyOutputSchema>;

export async function suggestTradingStrategy(input: SuggestTradingStrategyInput): Promise<SuggestTradingStrategyOutput> {
  return suggestTradingStrategyFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestTradingStrategyPrompt',
  input: {schema: z.object({ // Prompt input includes fetched market data
    cryptocurrency: SuggestTradingStrategyInputSchema.shape.cryptocurrency,
    riskTolerance: SuggestTradingStrategyInputSchema.shape.riskTolerance,
    marketData: MarketDataSchema.nullable().describe("Current market data for the cryptocurrency. This will be fetched by a tool prior to calling you."),
  })},
  output: {schema: SuggestTradingStrategyOutputSchema},
  prompt: `You are an AI-powered trading strategy advisor.

You will suggest an optimal trading strategy for the selected cryptocurrency based on its current market data (provided as 'marketData'), general market trend concepts, and user-defined risk tolerance.
The current price from the market data tool is: {{#if marketData.price}}{{marketData.price}}{{else}}not available{{/if}}.
The 24h volume from the market data tool is: {{#if marketData.volume24h}}{{marketData.volume24h}}{{else}}not available{{/if}}.
The 24h price change from the market data tool is: {{#if marketData.priceChange24hPercent}}{{marketData.priceChange24hPercent}}%{{else}}not available{{/if}}.

Cryptocurrency: {{{cryptocurrency}}}
Risk Tolerance: {{{riskTolerance}}}

Consider the following:
- The provided current market data (price, volume, 24h change from the 'marketData' object). If this data is not available, state that and make a more general suggestion.
- General historical price data concepts and chart patterns (do not use real-time data beyond what is provided in 'marketData').
- General current market trends and news sentiment concepts (do not use real-time data).
- User's risk tolerance (low, medium, high).

Provide the following:
- Strategy Explanation: A clear and concise explanation of the suggested strategy, considering the fetched current price.
- Current Price: The current price that was fetched by the market data tool (from 'marketData.price', if available). This value is the direct output from the tool.
- Entry Point: A recommended price to enter the trade. This is an illustrative figure derived by your analysis based on the fetched current price and other factors.
- Exit Point: A recommended price to exit the trade. This is an illustrative figure derived by your analysis.
- Stop-Loss Level: A price level at which to set a stop-loss order. This is an illustrative figure derived by your analysis.
- Profit Target: A price level at which to take profit. This is an illustrative figure derived by your analysis.
- Disclaimer: A standard disclaimer. Emphasize that the current price is from the tool, but all other strategy figures (entry, exit, etc.) are AI-derived illustrative examples, not live financial advice, and that the tool itself currently uses simulated data.

Format your response as a JSON object with the fields: strategyExplanation, currentPrice, entryPoint, exitPoint, stopLossLevel, profitTarget, and disclaimer.
If current market data was not available from the tool, the currentPrice field can be omitted or set to null, and your strategy should reflect this lack of live data.
`,
});

const suggestTradingStrategyFlow = ai.defineFlow(
  {
    name: 'suggestTradingStrategyFlow',
    inputSchema: SuggestTradingStrategyInputSchema,
    outputSchema: SuggestTradingStrategyOutputSchema,
    // Tools are not directly called by this prompt, but the flow uses getCryptoMarketDataTool
    // to pre-fetch data and pass it to the prompt's input.
  },
  async (input: SuggestTradingStrategyInput) => {
    // Step 1: Fetch market data using the tool
    let marketData: MarketData | null = null;
    try {
      // Explicitly call the tool function (wrapper)
      marketData = await getCryptoMarketDataTool({symbol: input.cryptocurrency});
    } catch (toolError) {
      console.error(`Error calling getCryptoMarketDataTool for ${input.cryptocurrency}:`, toolError);
      // Proceed without market data, the prompt is designed to handle this
    }

    // Step 2: Call the prompt with the original input + fetched market data
    const {output} = await prompt({
        ...input,
        marketData: marketData,
    });
    
    if (!output) {
        throw new Error("The AI model did not return the expected output format for trading strategy.");
    }
    // Ensure currentPrice is set in the output if marketData was available and AI didn't include it
    if (marketData && marketData.price && output.currentPrice === undefined) {
        output.currentPrice = marketData.price;
    }
    // If marketData was null or price was missing, ensure currentPrice is not in output or is null
    if ((!marketData || marketData.price === undefined || marketData.price === null) && output.currentPrice !== undefined) {
      // The AI might still hallucinate a price if not explicitly told to omit.
      // The prompt guides it to omit or set to null. This is a double check.
      // Based on the schema, optional means it can be omitted.
      // If the AI returns it as null, that's fine.
      // If it returns a number when it shouldn't, we could nullify it here,
      // but the prompt should be strong enough.
    }
    return output;
  }
);

